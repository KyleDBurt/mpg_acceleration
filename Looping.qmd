---
title: "Looping"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(purrr)
library(ggpubr)
```

# Set seed

Set seed to general 123.

```{r}
set.seed(123)
```

# Generate horsepower and weight data

```{r}
nsample <- 150

horsepower_values <- sample(seq(100, 400, by = 10), 
                            nsample, replace = TRUE)

weight_values <- sample(seq(2000, 4000, by = 50), 
                        nsample, replace = TRUE)
```

# Store in a data frame

```{r}
car_data <- data.frame(horsepower = horsepower_values, 
                       weight = weight_values, cylinders = 4)  
```

# Create an empty data frame to store "for" loop results

```{r}
engine_performance_ForLoop <- data.frame(mpg = numeric(nsample), 
                                      acceleration = numeric(nsample))
```

# For loop

```{r}
source("R/function.R")

for (i in 1:nrow(car_data)) {
  result <- engine_performance(car_data$cylinders[i], 
                               car_data$horsepower[i], 
                               car_data$weight[i])
  engine_performance_ForLoop$mpg[i] <- result$mpg
  engine_performance_ForLoop$acceleration[i] <- result$acceleration
}
```

# Combine with original data

```{r}
For_car_data <- cbind(car_data, engine_performance_ForLoop)
```

# "purrr"

```{r}
purrr_car_data <- pmap(list(cylinders = car_data$cylinders, 
                            horsepower = car_data$horsepower, 
                            weight = car_data$weight), 
                       engine_performance)
```

### Create data frame

```{r}
purrr_car_data <- purrr_car_data %>% 
  map_dfr(~as_tibble(.)) %>%
  bind_cols(car_data, .)
```

# Graph of horsepower (x) v acceleration (y)

```{r}
ggplot(For_car_data, aes(x = horsepower, y = acceleration, 
                         color = horsepower)) +
  geom_point() +
  labs(title = "Horsepower v Acceleration", 
       x = "Horsepower (hp)", y = "Miles per Hour (mph)") +
  scale_color_gradient(low = "blue", high = "red") +
  theme_bw()
```
